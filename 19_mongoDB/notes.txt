some basic commands for mongodb
================================
1> mongosh--> for entering mongo shell
2> show dbs --> show all the databases present 
3> use <db_name> --> use existing or / create new database to use it
4> db ---> show current db
5> show collections --> show collections inside a database



Basic info related to mongoDb
==============================
BSON --> binary json
:->as usual we use json but mongoDB store them in binary format for more efficiency(only machine readable data)

:->document : mongo stores data in form of documents(BSON docs)
:->collection : mongodb stores documents in collection 
 

disadvantages for JSON
--------------------
:text based
:space inefficient
:less number of datatypes in json
========================================================================

SQL compared to mongoDB
-------------------------
instead of tables in mongoDB we use collection and each collection holds individual documents which is equivalent to a single row of the sql

tables--> collections
rows/tupples ---> documents (jsons)

INSERT in DB
-----------

===>db.createCollection("student")  -->create a new collection
=====> db.collection.insertOne() --> inserts a single document into a collection,
                          -->  if a collection does not exist mongodb creates the collection when you first   store data for the collection


ex- db.student.insertOne( {name:"adam", marks :79})

output :--> 
{
  acknowledged: true,
  insertedId: ObjectId('66f1bcb802b373f326c73bf8')// this represents primary key of that document
}


db.student.find()////this returns everything 

 output :-->
 [
  {
    _id: ObjectId('66f1bcb802b373f326c73bf8'),
    name: 'adam',
    marks: 79
  }
]

---> in the same collection we can do this also

   db.student.insertOne({name :"bob", city:"delhi", marks : 88})

-->many no of key and value as we like , no specific format for this
-------------------------
insertMany(array of documents)

db.student.insertMany([{name:"bob,mark:68},{name:"gupta",mark:789}])

----------------------------------------------------------------------------------------

for finding specific items
db.student.find({name:"pikul})-->this returns a cursor //retuns an array of documents //references to the actual document
or
db.student.findOne({city:"delhi"})--->this returns an actual document 

or for multiple conditions

db.student.find({city:"delhi",marks:88})

Q: find student where mark >75
ans: db.student.find({marks:{$gt:75}})

Q: Find student who live in delhi or mumbai
ans : db.student.find ( {city: {$in: ["delhi", "mumbai"]}})

Q: Find student who scored > 75 or live in delhi
ans : db.student.find({$or: [ {marks: {$gt:75}} , {city:"delhi"}] })


Name   Description
------ ----------------------------
$eq:  Matches values that are equal to a specified value.
$gt:  Matches values that are greater than a specified value.
$gte: Matches values that are greater than or equal to a specified value.
$in:  Matches any of the values specified in an array.
$lt:  Matches values that are less than a specified value.
$lte: Matches values that are less than or equal to a specified value.
$ne:  Matches all values that are not equal to a specified value.
$nin: Matches none of the values specified in an array.
-------------------------------------------------------
Logical 
============
Name  Description
$and:   Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.
$not:   Inverts the effect of a query predicate and returns documents that do not match the query predicate.
$nor:   Joins query clauses with a logical NOR returns all documents that fail to match both clauses.
$or:    Joins query clauses with a logical OR returns all documents that match the conditions of either clause
--------------------------------------------------------------------
Element
======
Name       Description
$exists:  Matches documents that have the specified field.
$type:    Selects documents if a field is of the specified type.
---------------------------------------------------------------------------------
UPDATE IN DB
------------
updateOne
db.student.updateOne() : updates at most a single document that match a specific filter even 
                         though mutiple documents may match the specific filter.
        
db.student.updateOne(<filter>,<update>,<options>)
ex- db.student.updateOne({name:"adam"},{$set :{marks:99}})

With the update operations, the aggregation pipeline can consist of the following stages:
    
$addFields
$set-->
$project
$unset
$replaceRoot
$replaceWith

db.collection.updateMany()-->update all documents that match a specific filter
db.student.updateMany({city:99},{$set :{city:"delhi"}})
db.collection.replaceOne()--> Replaces at most a single document that match a specific 
                              filter even though multiple documents may match the specific filter


db.student.replaceOne({name:"adam"},{$set :{name:"shradha",marks:99,age:88}})
//this does not change only one field in the document it changes the whole document itself with same primary key
//adds new fields to documents .$set outputs documents that contains all existing fields from the input documents and newly added  fields
-------------------------------------------------------------------------------------------------------------------
#Nesting

{
  _id:Object(-------------------)
  name:'hari singh',
  performance:{marks:99,grade:'a}
}
//object inside object ==>nesting

to create:-->
          db.student.insertOne({name:hari singh", performance:{marks:99,grade:'a}})

to find:-->
          db.student.findOne({"performance.marks":99})

=========================================================
#Deleteing 

db.collection.deleteOne(<filter>,<option>)
db.student.deleteOne({name:"gupta"})

db.student.deleteMany({age:{$eq:67}})//for deleting many documents

db.student.drop()-->deletes that collection

db.student.deleteMany({})-->this makes the entire collection empty

db.dropDatabase()--> this deletes the database

