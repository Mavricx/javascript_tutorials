why database?
->can store large data
->features like securjity scalability etc
->easier to insert update or delete data

DBMS-->database management system is a covering to database to perform actions more efficiently

SQL vs No-SQL

sql(structured query language)
===
->realtional database (data stored in tables)
ex-mysql, oracle ,postgresql,etc

NO-sql
-====
->collection of database that does not uses sql
->on relational database 
->data stored in document/key-val/graphs etc
ex-mongodb, cassandra ,neo4j etc

=========================================================================
ALL THESE ARE WRITTEN AS SQL CODE AND NOT IN FORMAL language
=========================================================================
create database college; -- creates a database called college
CREATE DATABASE IF NOT EXISTS college  --  more appropriate 
drop database college;  -- deletes college database

use college;  -- uses college database from now on

CREATE TABLE students( -- creates a table in the college database
roll_no INT,
name VARCHAR (30),
age INT);

INSERT INTO students  -- insert these values into the students table
VALUES
(101,"ADAM",12),
(102,"BOB", 14);

SELECT * FROM students; -- shows all the data in the students table
==========
Data Types
==================================================================================================         
DATATYPE                    DESCRIPTION                                                    USAGE 
===================================================================================================
CHAR                  string(0-255), can store characters of fixed length                 CHAR(50)            
VARCHAR               string(0-255), can store characters up to given length            VARCHAR(50)
BLOB                  string(0-65535), can store binary large object                     BLOB(IOOO)
INT                   integer( -2,147,483,648 to 2,147,483,647 )                           INT
TINYINT               integer(-128 to 127)                                                 TINYINT
BIGINT                integer( -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 )  BIGINT
BIT                   can store x-bit values. x can range from 1 to 64                     BIT(2)
FLOAT                 Decimal number - with precision to 23 digits                         FLOAT
DOUBLE                Decimal number - with 24 to 53 digits                                DOUBLE
BOOLEAN               Boolean values O or I                                               BOOLEAN
DATE                  date in format of YYYY-MM-DD ranging from 1000-01-01 to 9999-12-31   DATE
YEAR                  year in 4 digits format ranging from 1901 to 2155                    YEAR
====================================================================================================

TINYINT range is (-128 to 127)
TINYINT UNSIGNED --> range is 0 to 255

create table defines shcema of the a row/touple which will be inserted with each insert statement


Constraints
Rules for data in the table
=============================
NOT NULL --> columns cannot have a null value
UNIQUE --> all values in column are different
DEFAULT -- >sets the default value of a column
CHECK --> it can limit the values allowed in a column




salary INT DEFAULT 25000
CONSTRAINT age _ checkCHECK (age >= 18 AND city= Delhi) 


primary key Constraints -->makes a coulmn unique and not null but used only for one
                        --> there is only one 1 PK and it should be not null

CREATE TABLE teacher (
    id int not null,
    primary key(id)
);

foreign key Constraints --> prevent actions that would destroy links between tables
                        --> fks can have duplicate and null values
 CREATE TABLE student (
    cust_id int,
    FOREIGN KEY(teacher_id) references teachers(id) //here id in teacher table is primary key and is used as foreign 
 );

INSERT COMMAND 
==============
 INSERT INTO user (id, age, name, email, followers, following) 
VALUES 
(1, 25, 'Alice', 'alice@example.com', 150, 200),
(2, 30, 'Bob', 'bob@example.com', 300, 250),
(3, 22, 'Charlie', 'charlie@example.com', 120, 180),
(4, 28, 'David', 'david@example.com', 400, 350),
(5, 35, 'Eve', 'eve@example.com', 600, 500);

for single user
================
INSERT INTO user (id, age, name, email, followers, following) 
VALUES (1, 25, 'Alice', 'alice@example.com', 150, 200);

SELECT COMMAND 
===============
select * from user;
select id , name ,email from user;
select distinct age from user;